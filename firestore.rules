rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOneOfRoles(roles) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || hasRole('admin');
      allow list: if hasRole('admin');
      allow create: if request.auth.uid == userId;
    }

    match /invites/{inviteId} {
      allow create: if hasRole('admin');
      allow read: if true;
      allow update: if hasRole('admin') || request.auth.uid != null;
    }
    
    match /claims/{claimId} {
      allow create: if request.auth != null;
      allow read: if isOneOfRoles(['claims', 'manager', 'admin']) || resource.data.requesterId == request.auth.uid;
      allow update: if isOneOfRoles(['claims', 'admin']);
      
      match /history/{eventId} {
        allow create: if request.auth != null;
        allow read: if isOneOfRoles(['claims', 'manager', 'admin']) || get(/databases/$(database)/documents/claims/$(claimId)).data.requesterId == request.auth.uid;
        allow update, delete: if false;
      }
    }
    
    match /auditLogs/{logId} {
      allow read: if hasRole('admin');
      allow create: if request.auth != null;
      allow update, delete: if false; 
    }
  }
}