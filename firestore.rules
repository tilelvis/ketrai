rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /invites/{inviteId} {
        allow read: if request.auth != null; // Admins read to display, users read to accept.
        allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        allow update: if request.auth != null; // Admins cancel, users accept.
    }

    match /claims/{claimId} {
      // Allow create for any authenticated user
      allow create: if request.auth != null;
      
      // Allow read if user is an admin/manager/claims or if they are the owner of the claim
      allow read: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'manager', 'claims'] || resource.data.requester.uid == request.auth.uid);
      
      // Allow update only for admin role
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // No one can delete claims for now to preserve history
      allow delete: if false;
    }

    match /notifications/{notificationId} {
        // Users can only read their own notifications
        allow read: if request.auth != null && resource.data.uid == request.auth.uid;
        // Anyone can create a notification (e.g., system, other users)
        // Read access is the primary security control here.
        allow create: if request.auth != null;
        // Users can delete their own notifications
        allow delete: if request.auth != null && resource.data.uid == request.auth.uid;
        allow update: if false;
    }
  }
}
