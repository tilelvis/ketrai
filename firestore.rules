rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // -------------------------
    // helper: check role membership
    // -------------------------
    function hasRole(roles) {
      return request.auth != null && request.auth.token.role in roles;
    }

    // -------------------------
    // USERS
    // -------------------------
    match /users/{userId} {
      allow get: if request.auth.uid == userId || hasRole(['admin']);
      allow update: if request.auth.uid == userId || hasRole(['admin']);
      allow create: if request.auth.uid == userId;
      allow list: if hasRole(['admin']);

      // Notifications - private to user
      match /notifications/{notificationId} {
        allow read, write, delete: if request.auth.uid == userId;
      }
    }

    // -------------------------
    // INVITES
    // -------------------------
    match /invites/{inviteId} {
      allow create: if hasRole(['admin']);
      allow read: if true;                // accept via link
      allow update: if true;
      allow delete: if false;
    }

    // -------------------------
    // CLAIMS
    // -------------------------
    match /claims/{claimId} {
      allow create: if request.auth != null;
      allow list: if hasRole(['admin', 'claims', 'manager']);
      allow get: if hasRole(['admin', 'claims', 'manager'])
                  || (request.auth != null && resource.data.requesterId == request.auth.uid);
      allow update: if hasRole(['admin', 'claims']);
      allow delete: if false;

      // claim history: append-only
      match /history/{eventId} {
        // Admins/Claims can create. The user requesting the claim can also create the initial history event.
        allow create: if hasRole(['admin', 'claims']) || request.auth.uid == request.resource.data.requesterId;
        allow get: if hasRole(['admin', 'claims', 'manager'])
                   || (request.auth != null && get(/databases/$(database)/documents/claims/$(claimId)).data.requesterId == request.auth.uid);
        allow update, delete: if false;
      }
    }

    // -------------------------
    // DISPATCH JOBS
    // -------------------------
    match /dispatch/{jobId} {
      allow create, update, get, list: if hasRole(['admin', 'dispatcher', 'manager']);
      // couriers can read/update only assigned jobs (ensure assignedCouriers is an array of UIDs)
      allow get, update: if request.auth != null && request.auth.uid in resource.data.assignedCouriers;
      allow delete: if false;
    }
    
    // -------------------------
    // AUDIT LOGS
    // -------------------------
    match /auditLogs/{logId} {
      // allow admins + managers to read/list audit logs
      allow get, list: if hasRole(['admin', 'manager']);

      // allow authenticated clients (or server) to create audit logs
      allow create: if request.auth != null;

      // no edits or deletes allowed
      allow update, delete: if false;
    }

     // -------------------------
    // FAILED AUDIT LOGS
    // -------------------------
    match /failedAuditLogs/{logId} {
      allow read, list, create: if hasRole(['admin']);
      allow update, delete: if false;
    }
  }
}
