rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // -------------------------
    // Utility: role helper
    // -------------------------
    function hasRole(roles) {
      return request.auth != null && request.auth.token.role in roles;
    }

    // -------------------------
    // USERS
    // -------------------------
    match /users/{userId} {
      // User can read/update their own profile
      allow get: if request.auth.uid == userId || hasRole(['admin']);
      allow update: if request.auth.uid == userId || hasRole(['admin']);
      allow create: if request.auth.uid == userId;
      allow list: if hasRole(['admin']);

      // Notifications - private to user
      match /notifications/{notificationId} {
        allow read, write, delete: if request.auth.uid == userId;
      }
    }

    // -------------------------
    // INVITES
    // -------------------------
    match /invites/{inviteId} {
      allow create: if hasRole(['admin']);
      allow read: if true; // anyone with link
      allow update: if true; // for accepting/declining
    }

    // -------------------------
    // CLAIMS
    // -------------------------
    match /claims/{claimId} {
      // Any authenticated user/support can raise
      allow create: if request.auth != null;

      // Admin/claims/manager can list all claims
      allow list: if hasRole(['admin', 'claims', 'manager']);

      // Admin/claims/manager can read individual claims
      allow get: if hasRole(['admin', 'claims', 'manager'])
        || (request.auth != null && resource.data.requesterId == request.auth.uid);

      // Only admin & claims team can update
      allow update: if hasRole(['admin', 'claims']);

      // Prevent deletion
      allow delete: if false;

      // Claim history (append-only)
      match /history/{eventId} {
        // Admins/Claims can create. The user requesting the claim can also create the initial history event.
        allow create: if hasRole(['admin', 'claims']) || request.auth.uid == request.resource.data.requesterId;
        allow read: if hasRole(['admin', 'claims', 'manager'])
          || (request.auth != null
            && get(/databases/$(database)/documents/claims/$(claimId)).data.requesterId == request.auth.uid);
        allow update, delete: if false;
      }
    }

    // -------------------------
    // DISPATCH
    // -------------------------
    match /dispatch/{jobId} {
      allow read, write: if hasRole(['admin', 'dispatcher', 'manager']);
    }

    // -------------------------
    // AUDIT LOGS
    // -------------------------
    match /auditLogs/{logId} {
      // Only admin can read logs
      allow read: if hasRole(['admin']);

      // All authenticated users can write (append-only)
      allow create: if request.auth != null;

      // No edits/deletes allowed
      allow update, delete: if false;
    }

    // -------------------------
    // CLAIMS QUEUE (Optional: lightweight view for dashboards)
    // -------------------------
    match /claimsQueue/{queueId} {
      allow list, get: if hasRole(['admin', 'claims', 'manager']);
      allow create, update: if hasRole(['admin', 'claims']);
      allow delete: if false;
    }
  }
}
