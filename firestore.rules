rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    function isOwner(res) {
      return request.auth.uid == res.data.requesterId;
    }
    function userRoles() {
      // Use exists() to prevent errors on non-existent user docs
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) ? 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : 
             '';
    }
    function isAdmin() {
      return userRoles() in ['admin'];
    }
    function isManager() {
      return userRoles() in ['manager', 'admin'];
    }
    function isClaims() {
      return userRoles() in ['claims', 'admin'];
    }
     function isClaimsManagerOrAdmin() {
      return userRoles() in ['claims', 'manager', 'admin'];
    }
     function canRequestClaim() {
      return userRoles() in ['dispatcher', 'support', 'claims', 'admin'];
    }

    // User profiles can be read by their owner or any admin.
    // Any authenticated user can create their own profile document.
    match /users/{userId} {
      allow read: if isAuth() && (request.auth.uid == userId || isAdmin());
      allow write: if isAuth() && request.auth.uid == userId;
    }

    // User-specific subcollections like notifications
    match /users/{userId}/{subcollection}/{docId} {
        allow read, write: if isAuth() && request.auth.uid == userId;
    }
    
    // Invites can only be managed by admins.
    match /invites/{inviteId} {
      allow read, write: if isAdmin();
    }

    // Claims workflow rules
    match /claims/{claimId} {
      // Users can create claims, and admins can list them.
      allow create: if isAuth() && canRequestClaim();

      // Users can read their own claims. Admins/Managers/Claims can read all.
      allow read: if isAuth() && (isOwner(resource) || isClaimsManagerOrAdmin());
      allow list: if isAuth() && isClaimsManagerOrAdmin();

      // Only Claims officers and Admins can update claims (approve/reject).
      allow update: if isAuth() && isClaims();
    }

    // Subcollections within claims (like history)
    match /claims/{claimId}/{subcollection}/{docId} {
      allow read, write: if isAuth() && isClaims();
    }

    // Audit logs are append-only. Any authenticated user can create one.
    // They cannot be spoofed because the actorId is set by the server function.
    match /auditLogs/{logId} {
      allow create: if isAuth();
      allow read: if isAdmin(); // Only admins can view the audit log
      allow update, delete: if false; // Immutable
    }
  }
}
