rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Admins have full read/write access to the entire users collection.
    match /users/{document=**} {
      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Individual users can create their own profile, and read/update their own profile.
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow read, update: if request.auth.uid == userId;
    }

    // Rules for the 'notifications' collection
    match /notifications/{notificationId} {
      allow read, create: if request.auth != null;
      allow delete: if request.auth != null && resource.data.uid != null && request.auth.uid == resource.data.uid;
    }

    // Rules for the 'invites' collection
    match /invites/{inviteId} {
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      allow read: if true;
      allow update: if (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') || (request.auth.uid != null);
    }
    
    // Rules for the 'claims' collection
    match /claims/{claimId} {
      // ANY authenticated user can create (request) a claim.
      allow create: if request.auth != null;

      // Only authorized roles (claims, manager, admin) can read the claims list.
      // Other roles can only read claims they have created themselves.
      allow read: if request.auth != null && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['claims', 'manager', 'admin'] || 
        resource.data.requesterId == request.auth.uid);

      // Only admins can update claims (to run the AI draft).
      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
