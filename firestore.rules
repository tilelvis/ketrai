rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // -------------------------
    // Utility: role helper
    // -------------------------
    function hasRole(roles) {
      return request.auth != null && request.auth.token.role in roles;
    }

    // -------------------------
    // USERS
    // -------------------------
    match /users/{userId} {
      // User can read/update their own profile
      allow get, update: if request.auth.uid == userId;
      // Admins can manage any user
      allow get, update: if hasRole(['admin']);
      // Only admins can list all users
      allow list: if hasRole(['admin']);
      // Prevent unauthorized creation/deletion
      allow create, delete: if hasRole(['admin']);
    }

    // -------------------------
    // INVITES
    // -------------------------
    match /invites/{inviteId} {
      allow create: if hasRole(['admin']);
      // Allow reading for token verification, updating for acceptance
      allow read, update: if true; 
    }

    // -------------------------
    // CLAIMS
    // -------------------------
    match /claims/{claimId} {
      // Any authenticated user can create a claim request
      allow create: if request.auth != null;
      // Specific roles can list all claims
      allow list: if hasRole(['admin', 'claims', 'manager']);
      // Roles can get any claim, or a user can get their own claim
      allow get: if hasRole(['admin', 'claims', 'manager']) || (request.auth != null && resource.data.requesterId == request.auth.uid);
      // Only admin & claims officers can update (approve/reject/draft)
      allow update: if hasRole(['admin', 'claims']);
      allow delete: if false; // Prevent deletion

      match /history/{eventId} {
        allow read, create: if hasRole(['admin', 'claims', 'manager']) || (request.auth != null && get(/databases/$(database)/documents/claims/$(claimId)).data.requesterId == request.auth.uid);
        allow update, delete: if false;
      }
    }
    
    // -------------------------
    // ETA / Recommendations / Risk (immutable request/result docs)
    // -------------------------
    match /etaRequests/{id} {
      allow create: if hasRole(['dispatcher', 'support', 'manager', 'admin']);
      allow read: if hasRole(['dispatcher', 'support', 'manager', 'admin']);
      allow update, delete: if false;
    }
    match /dispatchRecommendations/{id} {
      allow create: if hasRole(['dispatcher', 'manager', 'admin']);
      allow read: if hasRole(['dispatcher', 'manager', 'admin']);
      allow update, delete: if false;
    }
    match /riskAnalyses/{id} {
      allow create: if hasRole(['manager', 'admin']);
      allow read: if hasRole(['manager', 'admin']);
      allow update, delete: if false;
    }

    // -------------------------
    // AUDIT LOGS
    // -------------------------
    match /auditLogs/{logId} {
      // ONLY admins can read logs
      allow read: if hasRole(['admin']);
      // Any authenticated user/service can write logs
      allow create: if request.auth != null;
      // Logs are immutable
      allow update, delete: if false;
    }
    
     match /failedAuditLogs/{logId} {
      allow create: if request.auth != null;
      allow read, update, delete: if hasRole(['admin']);
    }
  }
}
