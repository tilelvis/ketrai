rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for role checks
    function isRole(role) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOneOfRoles(roles) {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }
    
    // User profile rules
    match /users/{userId} {
      // Allow any authenticated user to read any user profile.
      // This is necessary for fetching profile data (like names/roles) throughout the app.
      allow read: if request.auth != null;
      
      // A user can update their own profile.
      allow update: if request.auth != null && request.auth.uid == userId;
      
      // Only admins can create or delete users (though creation is handled via auth triggers).
      allow create, delete: if isRole('admin');

      // User-specific subcollections
      match /notifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Claims rules
    match /claims/{claimId} {
      // Allow specific roles to create claims.
      allow create: if isOneOfRoles(['dispatcher', 'support', 'claims', 'manager', 'admin']);
      
      // Allow users to read their own claims, and certain roles to read all claims.
      allow read: if (resource.data.requesterId == request.auth.uid) || isOneOfRoles(['claims', 'manager', 'admin']);
      
      // Only claims officers and admins can update claim status.
      allow update: if isOneOfRoles(['claims', 'admin']);
      
      // Disallow deleting claims.
      allow delete: if false;

      // Claim history subcollection
      match /history/{historyId} {
        // Only allow creating history entries, not updating/deleting them.
        allow create: if request.auth != null;
        allow read: if (get(/databases/$(database)/documents/claims/$(claimId)).data.requesterId == request.auth.uid) || isOneOfRoles(['claims', 'manager', 'admin']);
        allow update, delete: if false;
      }
    }
    
    // Audit logs are append-only for any authenticated user, but only readable by admins.
    match /auditLogs/{logId} {
      allow create: if request.auth != null;
      allow read: if isRole('admin');
      allow update, delete: if false;
    }

    // Invites can be created/read by admins and read by anyone with the token (for the invite page).
    match /invites/{inviteId} {
        allow read, create, update: if isRole('admin');
        // Public read for the invite page logic is handled implicitly by queries,
        // but we add this for clarity. A specific rule for the invite page query may be needed.
        allow get: if true; 
    }
  }
}
