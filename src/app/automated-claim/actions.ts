"use server";

import { automatedInsuranceClaimDraft } from "@/ai/flows/automated-insurance-claim-draft";
import type { AutomatedInsuranceClaimDraftInput } from "@/ai/flows/automated-insurance-claim-draft";
import { db, doc, collection, writeBatch, serverTimestamp, getDoc } from "@/lib/firebase";
import { logEvent } from "@/lib/audit-log";
import type { Profile } from "@/store/profile";


export async function runAutomatedClaim(input: AutomatedInsuranceClaimDraftInput, actor: { uid: string; role: Profile['role'] }) {
  try {
    const result = await automatedInsuranceClaimDraft(input);

    const batch = writeBatch(db);
    const claimRef = doc(db, "claims", input.claimId);
    
    // 1. Update the main claim doc with the AI draft
    batch.update(claimRef, {
        claimDraftText: result.claimDraftText,
        claimDraftJson: result.claimDraftJson,
        status: "inReview", // A more descriptive status after AI drafting
        updatedAt: serverTimestamp(),
        adminId: actor.uid,
    });
    
    // 2. Add history event for drafting
    const historyRef = doc(collection(db, "claims", input.claimId, "history"));
    batch.set(historyRef, {
        action: "drafted",
        by: actor.uid,
        timestamp: serverTimestamp(),
        details: `AI draft generated by admin.`
    });

    await batch.commit();

    await logEvent(
        "claim_drafted",
        actor.uid,
        actor.role,
        { id: input.claimId, collection: "claims" },
        { details: `AI draft generated for claim.` }
    );

    return { success: true, result };
  } catch (error) {
    console.error("Automated Claim failed:", error);
    const message = error instanceof Error ? error.message : "An unknown error occurred.";
    return { success: false, error: `Failed to generate insurance claim draft: ${message}` };
  }
}